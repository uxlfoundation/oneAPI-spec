.. SPDX-FileCopyrightText: 2023 Intel Corporation
..
.. SPDX-License-Identifier: CC-BY-4.0

.. _onemkl_device_rng_distributions_method:

Distributions Template Parameter Method
=======================================

.. tabularcolumns:: |\Y{0.4}|\Y{0.2}|\Y{0.4}|

.. list-table::
   :header-rows: 1
   :class: longtable

   * -  Method Type
     -  Distributions
     -  Math Description

   * -  ``uniform_method::standard``
        ``uniform_method::accurate``
     -  ``uniform``
     -   Standard method. ``uniform_method::accurate`` checks for additional ``float`` and ``double`` data types.
         For ``integer`` data types, it uses ``double`` as a ``BRNG`` data type (``float`` ``BRNG`` data type is used in
         ``uniform_method::standard`` method on GPU).
   * -  ``gaussian_method::box_muller2``
     -  ``gaussian``
     -  Generates normally distributed random numbers `x1` and `x2` through the pair of uniformly distributed numbers `u1` and `u2` according to
        the formulas: :math:`x_1 = \sqrt{-2 \ln u_1} \sin {2 \pi u_2}`\ :math:`x_2 = \sqrt{-2 \ln u_1} \cos {2 \pi u_2}`\
   * -  ``exponential_method::icdf``
        ``exponential_method::icdf_accurate``
     -  ``exponential``
     -  Inverse cumulative distribution function (ICDF) method.
   * -  ``lognormal_method::box_muller2``
     -  ``lognormal``
     -  Normally distributed random numbers `x1` and `x2` are produced through the pair of uniformly distributed numbers `u1` and `u2` according to the formulas:
        :math:`x_1 = -2 \ln u_1 \sin {2 \pi u_2}`\       \ :math:`x_2 = -2 \ln u_1 \cos {2 \pi u_2}`\

        Then `x1` and `x2` are converted to lognormal distribution.
   * -  ``bernoulli_method::icdf``
     -  ``bernoulli``
     -  Inverse cumulative distribution function (ICDF) method.
   * -  ``poisson_method::devroye``
     -  ``poisson``
     -  Acceptance/rejection method for :math:`\lambda \geq 27` with decomposition into four regions:

        * Two parallelograms
        * Triangle
        * Left exponential tail
        * Right exponential tail
   * -  ``beta_method::cja``
        ``beta_method::cja_accurate``
     -  ``beta``
     -  Acceptance/rejection method depending on the parameters of the distribution, ``p`` and ``q``:

        * If ``max(p,q) < 1``, beta distributed variates are obtained by means of
          composition of two algorithms (below constants K and C are such that
          ``K~=0.852``, ``C~=-0.956`` ):

          * if ``q+K*p^2+C<=0``, method of Johnk is used (see References 1. for details);
          * if ``q+K*p^2+C>0``, switching method of Atkinson is used (see
            References 2. for details). In the method of Atkinson interval ``(0,1)``
            is divided into two parts, ``(0,t)`` and ``(t,1)``, where
            ``t=sqrt(p*(1-p))/(sqrt(p*(1-p))+sqrt(q*(1-q)))``. Then the
            acceptance/rejection technique is applied on each of these
            intervals.
        * If ``p < 1`` and ``q > 1``, switching algorithm of Atkinson with
          ``t=(1-p)/(q+1-p)`` is used;
        * If ``p < 1`` and ``q > 1``, switching algorithm of Atkinson with
          interchanging parameters, ``p`` and ``q`` and ``t=(1-p)/(q+1-p)`` is used.
          After generation ``x`` using the algorithm random number ``1 - x`` is returned
          as required result.
        * If ``min(p,q) > 1``, algorithm of Cheng is used. This method based on
          acceptance/rejection technique operates by obtaining beta variates
          of the second kind and making their transformation to beta variates
          of the first kind (see References 3. for details);
        * If ``p = 1`` and ``q`` is arbitrary positive number inverse cumulative
          distribution function (ICDF) method is used;
        * If ``q = 1`` and ``p`` is arbitrary positive number inverse cumulative
          distribution function (ICDF) method is used;
        * If ``p = 1`` and ``q = 1`` beta distribution reduces to uniform distribution
          over ``(0,1)`` interval.

   * -  ``gamma_method::marsaglia``
        ``gamma_method::marsaglia_accurate``
     -  ``gamma``
     -  Acceptance/rejection method depending on the :math:`\alpha` parameter of the distribution:

        * If :math:`\alpha > 1` method of Marsaglia and Tsang is used.
          This algorithm is based on the acceptance/rejection
          method using squeeze technique (see References 4. for details). Gaussian random
          numbers are generated by means of the Box-Muller 2 method. Due to
          nature of the Box-Muller algorithm (pair of uniformly distributed
          random number is transformed into pair of standard normal numbers) to
          calculate ``n`` gamma variates one always generates even number of normal
          and uniformly distributed random numbers. If the last pair
          of gaussian and uniformly distributed random numbers is not used it is
          saved for later usage.
        * If :math:`\alpha = 1` gamma distribution reduces to exponential distribution
          with parameters ``(0,1)``.
        * If :math:`\alpha \geq 0.6` and :math:`\alpha < 1` modified method of Vaduva is used.
          Gamma distributed random number is generated using rejection from
          the Weibull distribution (see References 5. and 6. for details).
        * If :math:`\alpha < 0.6` gamma distributed random number is got by transformation
          of random variate with exponential power distribution (EPD). EPD random
          number is obtained using acceptance/rejection method. The algorithm for
          generation of gamma variate with parameter :math:`\alpha < 1` is a specific case of
          acceptance/rejection method used for generation of EPD random number.
          (see References 6. for details).

References
==========

   #. M.D. Johnk, Erzeugung von Betaverteilten und Gammaverteilten Zufallszahlen, Metrika, 8, 5-15, 1964
   #. A.C. Atkinson, A family of switching algorithms for the computer
      generation of beta random variables. Biometrika, 66, 1, 141-145, 1979
   #. Cheng R.C.H. Generating Beta variates with Nonintegral Shape
      Parameters, Communications of the ACM, 21, 4, 317-322, 1978.
   #. G. Marsaglia, and W.W. Tsang, A simple method for generating gamma
      variables. ACM Transactions on Mathematical Software, vol. 26, No. 3, 363-372, September 2000.
   #. I. Vaduva, On computer generation of gamma random variables by
      rejection and composition procedures. Mathematische Operationsforschung
      und Statistik, Series Statistics, vol. 8, 545-576, 1977.
   #. L. Devroye, Non-Uniform Random Variate Generation, Springer-Verlag, New York, 1986.


`NOTE:` Methods provided for exposition purposes.
